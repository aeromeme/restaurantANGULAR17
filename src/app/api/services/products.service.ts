/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiProductsCategoryCategoryIdGet$Json } from '../fn/products/api-products-category-category-id-get-json';
import { ApiProductsCategoryCategoryIdGet$Json$Params } from '../fn/products/api-products-category-category-id-get-json';
import { apiProductsCategoryCategoryIdGet$Plain } from '../fn/products/api-products-category-category-id-get-plain';
import { ApiProductsCategoryCategoryIdGet$Plain$Params } from '../fn/products/api-products-category-category-id-get-plain';
import { apiProductsGet$Json } from '../fn/products/api-products-get-json';
import { ApiProductsGet$Json$Params } from '../fn/products/api-products-get-json';
import { apiProductsGet$Plain } from '../fn/products/api-products-get-plain';
import { ApiProductsGet$Plain$Params } from '../fn/products/api-products-get-plain';
import { apiProductsIdDelete } from '../fn/products/api-products-id-delete';
import { ApiProductsIdDelete$Params } from '../fn/products/api-products-id-delete';
import { apiProductsIdGet$Json } from '../fn/products/api-products-id-get-json';
import { ApiProductsIdGet$Json$Params } from '../fn/products/api-products-id-get-json';
import { apiProductsIdGet$Plain } from '../fn/products/api-products-id-get-plain';
import { ApiProductsIdGet$Plain$Params } from '../fn/products/api-products-id-get-plain';
import { apiProductsIdPut } from '../fn/products/api-products-id-put';
import { ApiProductsIdPut$Params } from '../fn/products/api-products-id-put';
import { apiProductsPost$Json } from '../fn/products/api-products-post-json';
import { ApiProductsPost$Json$Params } from '../fn/products/api-products-post-json';
import { apiProductsPost$Plain } from '../fn/products/api-products-post-plain';
import { ApiProductsPost$Plain$Params } from '../fn/products/api-products-post-plain';
import { ProductDto } from '../models/product-dto';

@Injectable({ providedIn: 'root' })
export class ProductsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiProductsGet()` */
  static readonly ApiProductsGetPath = '/api/Products';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProductsGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProductsGet$Plain$Response(params?: ApiProductsGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProductDto>>> {
    return apiProductsGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProductsGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProductsGet$Plain(params?: ApiProductsGet$Plain$Params, context?: HttpContext): Observable<Array<ProductDto>> {
    return this.apiProductsGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProductDto>>): Array<ProductDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProductsGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProductsGet$Json$Response(params?: ApiProductsGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProductDto>>> {
    return apiProductsGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProductsGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProductsGet$Json(params?: ApiProductsGet$Json$Params, context?: HttpContext): Observable<Array<ProductDto>> {
    return this.apiProductsGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProductDto>>): Array<ProductDto> => r.body)
    );
  }

  /** Path part for operation `apiProductsPost()` */
  static readonly ApiProductsPostPath = '/api/Products';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProductsPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProductsPost$Plain$Response(params?: ApiProductsPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductDto>> {
    return apiProductsPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProductsPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProductsPost$Plain(params?: ApiProductsPost$Plain$Params, context?: HttpContext): Observable<ProductDto> {
    return this.apiProductsPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductDto>): ProductDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProductsPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProductsPost$Json$Response(params?: ApiProductsPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductDto>> {
    return apiProductsPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProductsPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProductsPost$Json(params?: ApiProductsPost$Json$Params, context?: HttpContext): Observable<ProductDto> {
    return this.apiProductsPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductDto>): ProductDto => r.body)
    );
  }

  /** Path part for operation `apiProductsIdGet()` */
  static readonly ApiProductsIdGetPath = '/api/Products/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProductsIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProductsIdGet$Plain$Response(params: ApiProductsIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductDto>> {
    return apiProductsIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProductsIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProductsIdGet$Plain(params: ApiProductsIdGet$Plain$Params, context?: HttpContext): Observable<ProductDto> {
    return this.apiProductsIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductDto>): ProductDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProductsIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProductsIdGet$Json$Response(params: ApiProductsIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductDto>> {
    return apiProductsIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProductsIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProductsIdGet$Json(params: ApiProductsIdGet$Json$Params, context?: HttpContext): Observable<ProductDto> {
    return this.apiProductsIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductDto>): ProductDto => r.body)
    );
  }

  /** Path part for operation `apiProductsIdPut()` */
  static readonly ApiProductsIdPutPath = '/api/Products/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProductsIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProductsIdPut$Response(params: ApiProductsIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiProductsIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProductsIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProductsIdPut(params: ApiProductsIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiProductsIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiProductsIdDelete()` */
  static readonly ApiProductsIdDeletePath = '/api/Products/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProductsIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProductsIdDelete$Response(params: ApiProductsIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiProductsIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProductsIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProductsIdDelete(params: ApiProductsIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiProductsIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiProductsCategoryCategoryIdGet()` */
  static readonly ApiProductsCategoryCategoryIdGetPath = '/api/Products/category/{categoryId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProductsCategoryCategoryIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProductsCategoryCategoryIdGet$Plain$Response(params: ApiProductsCategoryCategoryIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProductDto>>> {
    return apiProductsCategoryCategoryIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProductsCategoryCategoryIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProductsCategoryCategoryIdGet$Plain(params: ApiProductsCategoryCategoryIdGet$Plain$Params, context?: HttpContext): Observable<Array<ProductDto>> {
    return this.apiProductsCategoryCategoryIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProductDto>>): Array<ProductDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProductsCategoryCategoryIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProductsCategoryCategoryIdGet$Json$Response(params: ApiProductsCategoryCategoryIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProductDto>>> {
    return apiProductsCategoryCategoryIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProductsCategoryCategoryIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProductsCategoryCategoryIdGet$Json(params: ApiProductsCategoryCategoryIdGet$Json$Params, context?: HttpContext): Observable<Array<ProductDto>> {
    return this.apiProductsCategoryCategoryIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProductDto>>): Array<ProductDto> => r.body)
    );
  }

}
