/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiAzureBusReceiveGet } from '../fn/azure-bus/api-azure-bus-receive-get';
import { ApiAzureBusReceiveGet$Params } from '../fn/azure-bus/api-azure-bus-receive-get';
import { apiAzureBusReceiveSubscriptionGet } from '../fn/azure-bus/api-azure-bus-receive-subscription-get';
import { ApiAzureBusReceiveSubscriptionGet$Params } from '../fn/azure-bus/api-azure-bus-receive-subscription-get';
import { apiAzureBusSendPost } from '../fn/azure-bus/api-azure-bus-send-post';
import { ApiAzureBusSendPost$Params } from '../fn/azure-bus/api-azure-bus-send-post';
import { apiAzureBusTopicPost } from '../fn/azure-bus/api-azure-bus-topic-post';
import { ApiAzureBusTopicPost$Params } from '../fn/azure-bus/api-azure-bus-topic-post';

@Injectable({ providedIn: 'root' })
export class AzureBusService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiAzureBusSendPost()` */
  static readonly ApiAzureBusSendPostPath = '/api/AzureBus/send';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAzureBusSendPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAzureBusSendPost$Response(params?: ApiAzureBusSendPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiAzureBusSendPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAzureBusSendPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAzureBusSendPost(params?: ApiAzureBusSendPost$Params, context?: HttpContext): Observable<void> {
    return this.apiAzureBusSendPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiAzureBusReceiveGet()` */
  static readonly ApiAzureBusReceiveGetPath = '/api/AzureBus/receive';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAzureBusReceiveGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAzureBusReceiveGet$Response(params?: ApiAzureBusReceiveGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiAzureBusReceiveGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAzureBusReceiveGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAzureBusReceiveGet(params?: ApiAzureBusReceiveGet$Params, context?: HttpContext): Observable<void> {
    return this.apiAzureBusReceiveGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiAzureBusTopicPost()` */
  static readonly ApiAzureBusTopicPostPath = '/api/AzureBus/topic';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAzureBusTopicPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAzureBusTopicPost$Response(params?: ApiAzureBusTopicPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiAzureBusTopicPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAzureBusTopicPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiAzureBusTopicPost(params?: ApiAzureBusTopicPost$Params, context?: HttpContext): Observable<void> {
    return this.apiAzureBusTopicPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiAzureBusReceiveSubscriptionGet()` */
  static readonly ApiAzureBusReceiveSubscriptionGetPath = '/api/AzureBus/receive/{subscription}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAzureBusReceiveSubscriptionGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAzureBusReceiveSubscriptionGet$Response(params: ApiAzureBusReceiveSubscriptionGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiAzureBusReceiveSubscriptionGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAzureBusReceiveSubscriptionGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAzureBusReceiveSubscriptionGet(params: ApiAzureBusReceiveSubscriptionGet$Params, context?: HttpContext): Observable<void> {
    return this.apiAzureBusReceiveSubscriptionGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
