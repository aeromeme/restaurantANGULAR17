/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiOrderGet$Json } from '../fn/order/api-order-get-json';
import { ApiOrderGet$Json$Params } from '../fn/order/api-order-get-json';
import { apiOrderGet$Plain } from '../fn/order/api-order-get-plain';
import { ApiOrderGet$Plain$Params } from '../fn/order/api-order-get-plain';
import { apiOrderIdDelete } from '../fn/order/api-order-id-delete';
import { ApiOrderIdDelete$Params } from '../fn/order/api-order-id-delete';
import { apiOrderIdGet$Json } from '../fn/order/api-order-id-get-json';
import { ApiOrderIdGet$Json$Params } from '../fn/order/api-order-id-get-json';
import { apiOrderIdGet$Plain } from '../fn/order/api-order-id-get-plain';
import { ApiOrderIdGet$Plain$Params } from '../fn/order/api-order-id-get-plain';
import { apiOrderIdPut } from '../fn/order/api-order-id-put';
import { ApiOrderIdPut$Params } from '../fn/order/api-order-id-put';
import { apiOrderPost$Json } from '../fn/order/api-order-post-json';
import { ApiOrderPost$Json$Params } from '../fn/order/api-order-post-json';
import { apiOrderPost$Plain } from '../fn/order/api-order-post-plain';
import { ApiOrderPost$Plain$Params } from '../fn/order/api-order-post-plain';
import { OrderDto } from '../models/order-dto';

@Injectable({ providedIn: 'root' })
export class OrderService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiOrderGet()` */
  static readonly ApiOrderGetPath = '/api/Order';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderGet$Plain$Response(params?: ApiOrderGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderDto>>> {
    return apiOrderGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderGet$Plain(params?: ApiOrderGet$Plain$Params, context?: HttpContext): Observable<Array<OrderDto>> {
    return this.apiOrderGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<OrderDto>>): Array<OrderDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderGet$Json$Response(params?: ApiOrderGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderDto>>> {
    return apiOrderGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderGet$Json(params?: ApiOrderGet$Json$Params, context?: HttpContext): Observable<Array<OrderDto>> {
    return this.apiOrderGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<OrderDto>>): Array<OrderDto> => r.body)
    );
  }

  /** Path part for operation `apiOrderPost()` */
  static readonly ApiOrderPostPath = '/api/Order';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiOrderPost$Plain$Response(params?: ApiOrderPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<OrderDto>> {
    return apiOrderPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiOrderPost$Plain(params?: ApiOrderPost$Plain$Params, context?: HttpContext): Observable<OrderDto> {
    return this.apiOrderPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<OrderDto>): OrderDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiOrderPost$Json$Response(params?: ApiOrderPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<OrderDto>> {
    return apiOrderPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiOrderPost$Json(params?: ApiOrderPost$Json$Params, context?: HttpContext): Observable<OrderDto> {
    return this.apiOrderPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<OrderDto>): OrderDto => r.body)
    );
  }

  /** Path part for operation `apiOrderIdGet()` */
  static readonly ApiOrderIdGetPath = '/api/Order/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderIdGet$Plain$Response(params: ApiOrderIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<OrderDto>> {
    return apiOrderIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderIdGet$Plain(params: ApiOrderIdGet$Plain$Params, context?: HttpContext): Observable<OrderDto> {
    return this.apiOrderIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<OrderDto>): OrderDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderIdGet$Json$Response(params: ApiOrderIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<OrderDto>> {
    return apiOrderIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderIdGet$Json(params: ApiOrderIdGet$Json$Params, context?: HttpContext): Observable<OrderDto> {
    return this.apiOrderIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<OrderDto>): OrderDto => r.body)
    );
  }

  /** Path part for operation `apiOrderIdPut()` */
  static readonly ApiOrderIdPutPath = '/api/Order/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiOrderIdPut$Response(params: ApiOrderIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiOrderIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiOrderIdPut(params: ApiOrderIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiOrderIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiOrderIdDelete()` */
  static readonly ApiOrderIdDeletePath = '/api/Order/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiOrderIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderIdDelete$Response(params: ApiOrderIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiOrderIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiOrderIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiOrderIdDelete(params: ApiOrderIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiOrderIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
